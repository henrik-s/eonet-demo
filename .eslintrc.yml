env:
  browser: true
  node: true
  es6: true
extends: 'eslint:recommended'
globals:
  Atomics: readonly
  SharedArrayBuffer: readonly
  React: readonly
parser: '@typescript-eslint/parser'
parserOptions:
  ecmaFeatures:
    jsx: true
  ecmaVersion: 2018
  sourceType: module
plugins:
  - react
rules:
  array-bracket-newline: [
    'warn', {
      multiline: true
    }
  ]
  array-bracket-spacing:
    - warn
    - never
  array-callback-return:
    - error
  array-element-newline:
    - error
    - consistent
  block-spacing:
    - warn
    - always
  brace-style: [
    'warn',
    'stroustrup', {
      allowSingleLine: true
    }
  ]
  block-scoped-var:
    - error
  comma-dangle: [
    'warn', {
      arrays: 'always-multiline',
      objects: 'always-multiline',
      imports: 'always-multiline',
      exports: 'always-multiline',
      functions: 'ignore'
    }
  ]
  comma-spacing:
    - warn
  comma-style:
    - error
    - last
  computed-property-spacing:
    - warn
    - never
  curly:
    - warn
    - multi-line
  dot-location:
    - warn
    - property
  dot-notation:
    - warn
    - { allowKeywords: true }
  eol-last:
    - error
    - always
  eqeqeq:
    - error
    - smart
  func-call-spacing:
    - error
    - never
  func-style: [
    'error',
    'declaration', {
      allowArrowFunctions: true
    }
  ]
  function-paren-newline:
    - error
    - multiline
  guard-for-in:
    - error
  id-length: [
    'error', {
      min: 2,
      max: 40,
      exceptions: [
        '_'
      ]
    }
  ]
  implicit-arrow-linebreak:
    - error
    - beside
  indent:
    - error
    - 4
  jsx-quotes:
    - warn
    - prefer-single
  key-spacing: [
    'warn', {
      beforeColon: false,
      afterColon: true
    }
  ]
  keyword-spacing: [
    'warn', {
      after: true
    }
  ]
  linebreak-style:
    - error
    - unix
  lines-between-class-members: [
    'warn',
    'always', {
      exceptAfterSingleLine: true
    }
  ]
  max-len: [
    'error', {
      code: 120,
      ignoreComments: true,
      ignoreTrailingComments: true,
      ignoreUrls: true,
      ignoreStrings: true,
      ignoreTemplateLiterals: true,
      ignoreRegExpLiterals: true
    }
  ]
  max-params:
    - error
    - 4
  multiline-ternary:
    - error
    - always-multiline
  new-parens:
    - error
  no-alert:
    - error
  no-array-constructor:
    - error
  no-bitwise:
    - error
  no-else-return:
    - warn
  no-empty:
    - warn
    - {'allowEmptyCatch': true}
  no-extra-parens:
    - warn
    - all
    - {
      conditionalAssign: false,
      ignoreJSX: 'multi-line',
      enforceForArrowConditionals: false
    }
  no-extra-semi:
    - error
  no-floating-decimal:
    - error
  no-implicit-coercion:
    - warn
  no-irregular-whitespace:
    - warn
  no-multiple-empty-lines:
    - warn
    - { max: 2,  maxEOF: 0, maxBOF: 0 }
  no-multi-spaces:
    - warn
    - { ignoreEOLComments: true }
  no-nested-ternary:
    - error
  no-plusplus:
    - warn
    - { allowForLoopAfterthoughts: true }
  no-prototype-builtins:
    - error
  no-template-curly-in-string:
    - error
  no-trailing-spaces:
    - warn
  no-unused-vars:
    - off
  no-whitespace-before-property:
    - warn
  nonblock-statement-body-position:
    - error
    - beside
  object-curly-newline:
    - warn
    - {
      ObjectExpression: { "multiline": true, "minProperties": 1 },
      ImportDeclaration: { consistent: true }
    }
  object-curly-spacing:
    - warn
    - never
  padded-blocks:
    - warn
    - never
  padding-line-between-statements: [
    'error',
    { blankLine: 'always', prev: '*', next: 'return' }
  ]
  quote-props:
    - warn
    - consistent
  quotes:
    - error
    - single
  semi:
    - warn
    - always
    - { omitLastInOneLineBlock: true }
  semi-spacing:
    - warn
  space-before-blocks:
    - warn
    - always
  space-before-function-paren:
    - warn
    - never
  space-infix-ops:
    - warn
  space-in-parens:
    - error
    - never
  spaced-comment:
    - warn
    - always
  wrap-regex:
    - warn
